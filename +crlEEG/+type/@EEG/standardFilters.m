function fOut = standardFilters(fType,sampleRate,varargin)
% Generate standard filters useful for processing EEG
%
% Inputs
% ------
%   fType : Name of the filter
%  sampleRate : Samplerate of the EEG
% 
% Outputs
% -------
%   fOut : Filter object constructed with designfilt.
%
% Currently supported values for fType are:
%   '60HzNotch' : 60hz 10th Order Butterworth Bandstop Filter w/ 
%                   3dB Frequencies @ 58Hz and 62Hz
%   'bandPass'
%   'lowPass'
%   'highPass'
%
% There are also <name>_HighOrder versions of most filters, that use higher
% order Butterworth filters to obtain more tightly filtered signals. The
% use of these is not really advised, however, as they can have long
% transient effects.
%
% Part of the crlEEG project
% 2009-2018
%

p = inputParser;
p.addParameter('lowCutoff',0.5,@(x) isscalar(x)&&isnumeric(x));
p.addParameter('highCutoff',0.5,@(x) isscalar(x)&&isnumeric(x));
p.addParameter('fOrder',[],@(x) isscalar(x)&&isnumeric(x));
p.parse(varargin{:});


fOrder = p.Results.fOrder;
if isempty(fOrder)
  fOrder = 10;
end;

%% Validate Filter Name
validTypes = { '60HzNotch', '60HzNotch_HighOrder',...
               'bandPass', 'bandPass_HighOrder',...
               'lowPass' , 'lowPass_HighOrder',...
               'highPass', 'highPass_HighOrder' };
        
fType = validatestring(fType,validTypes);

%% Build Filter
switch lower(fType)  
  case '60hznotch'   
    fOut = designfilt(...
      'bandstopiir',...
      'SampleRate',sampleRate,...
      'HalfPowerFrequency1', 58, ...
      'HalfPowerFrequency2', 62,...
      'FilterOrder', fOrder,...
      'DesignMethod','butter');
    
  case '60hznotch_highorder'
    fOut = designfilt(...
      'bandstopiir',...
      'SampleRate',sampleRate,...
      'PassbandFrequency1',57,...
      'StopbandFrequency1',59,...
      'StopbandFrequency2',61,...
      'PassbandFrequency2',63,...
      'StopbandAttenuation',60,...
      'PassbandRipple1',1,...
      'PassbandRipple2',1,...
      'DesignMethod','butter');    
    
  case 'bandpass'
    fOut = designfilt(...
      'bandpassiir',...
      'SampleRate', sampleRate,...
      'HalfPowerFrequency1',0.5,...
      'HalfPowerFrequency2',150,...
      'FilterOrder',fOrder,...
      'DesignMethod','butter');   
    
  case 'bandpass_highorder'    
    fOut = designfilt(...
      'bandpassiir',...
      'SampleRate',sampleRate,...
      'StopbandAttenuation1',60,...
      'StopbandFrequency1',0.01,...
      'PassbandFrequency1',0.5,...
      'PassbandRipple',1,...
      'PassbandFrequency2',150,...
      'StopbandFrequency2',160,...
      'StopbandAttenuation2',60,...
      'DesignMethod','butter');  
    
  case 'lowpass'
    fOut = designfilt(...
      'lowpassiir',...
      'SampleRate',sampleRate,...
      'HalfPowerFrequency', 150,...
      'FilterOrder', fOrder,...
      'DesignMethod', 'butter');   
    
  case 'lowpass_highorder'
    fOut = designfilt(...
      'lowpassiir',...
      'SampleRate',sampleRate,...
      'PassbandFrequency',150,...
      'StopbandFrequency',155,...
      'StopbandAttenuation',60,...
      'PassbandRipple',1,...
      'DesignMethod','butter');    
    
  case 'highpass'
    fOut = designfilt(...
      'highpassiir',...
      'SampleRate',sampleRate,...
      'HalfPowerFrequency', 0.5,...
      'FilterOrder', fOrder,...
      'DesignMethod', 'butter');   
    
  case 'highpass_highorder'
    fOut = designfilt(...
      'highpassiir',...
      'SampleRate',sampleRate,...
      'PassbandFrequency',0.5,...
      'StopbandFrequency',0.1,...
      'StopbandAttenuation',60,...
      'PassbandRipple',1,...
      'DesignMethod','butter');    
    
  otherwise
    error('Provided filter name does not match known types');
    
end

