function fOut = standardFilters(fType,sampleRate,varargin)
% Generate standard filters useful for processing EEG
%
% Usage
% -----
%    fOut = crlEEG.EEG.standardFilters(fType,sampleRate,varargin)
%
% Inputs
% ------
%       fType : Name of the filter
%  sampleRate : Samplerate of the EEG
% 
% Outputs
% -------
%   fOut : Filter object constructed with designfilt.
%
% Currently supported values for fType are:
%   '60HzNotch' : 60hz 10th Order Butterworth Bandstop Filter w/ 
%                   3dB Frequencies @ 58Hz and 62Hz
%                 Available Options and Defaults:
%                   'HalfPowerFrequency1' : 58
%                   'HalfPowerFrequency2' : 62
%                           'FilterOrder' : 10
%                          'DesignMethod' : 'butter'
%   'bandStop' : Bandstop Filter
%                 Availabile Options and Defaults:
%                   'HalfPowerFrequency1' : 58
%                   'HalfPowerFrequency2' : 62
%                           'FilterOrder' : 10
%                          'DesignMethod' : 'butter'
%   'bandPass' : Bandpass Filter
%                 Availabile Options and Defaults:
%                   'HalfPowerFrequency1' : 0.5
%                   'HalfPowerFrequency2' : 150
%                           'FilterOrder' : 10
%                          'DesignMethod' : 'butter'
%   'lowPass'  : Lowpass Filter
%                 Availabile Options and Defaults:
%                    'HalfPowerFrequency' : 150
%                           'FilterOrder' : 10
%                          'DesignMethod' : 'butter'
%   'highPass' : Highpass Filter
%                 Availabile Options and Defaults:
%                    'HalfPowerFrequency' : 0.5
%                           'FilterOrder' : 10
%                          'DesignMethod' : 'butter'
%
% There are also <name>_HighOrder versions of most filters, that use higher
% order Butterworth filters to obtain more tightly filtered signals. The
% use of these is not really advised, however, as they can have long
% transient effects.
%
% Part of the crlEEG project
% 2009-2018
%



%% Input Parsing
import crlEEG.util.validation.*

isScalarNumeric = @(x) isscalar(x)&&isnumeric(x);

p = inputParser;
p.addParameter('lowCutoff',0.5,isScalarNumeric);
p.addParameter('highCutoff',0.5,isScalarNumeric);
p.addParameter('fOrder',[],isScalarNumeric);
p.addParameter('HalfPowerFrequency1',[], isScalarNumeric);
p.addParameter('HalfPowerFrequency2',[], isScalarNumeric);
p.addParameter('HalfPowerFrequency',[],isScalarNumeric);
p.addParameter('FilterOrder',10,isScalarNumeric);
p.addParameter('DesignMethod','butter',@(x) ischar(x));
p.parse(varargin{:});

%% Validate Filter Name
validTypes = { '60HzNotch', '60HzNotch_HighOrder',...
               'bandPass', 'bandPass_HighOrder',...
               'lowPass' , 'lowPass_HighOrder',...
               'highPass', 'highPass_HighOrder' };
        
fType = validatestring(fType,validTypes);

%% Build Filter
switch lower(fType) 
  case '60hznotch'   
    %% 60 Hz Notch Filter for Power Interference Removal
    fOut = designfilt(...
      'bandstopiir',...
      'SampleRate',sampleRate,...
      'HalfPowerFrequency1', 58, ...
      'HalfPowerFrequency2', 62,...
      'FilterOrder', p.Results.FilterOrder,...
      'DesignMethod',p.Results.DesignMethod);
             
  case 'bandstop'   
    %% Arbitrary BandStop Filter (Defaults to 60Hz)
    hPowF1 = p.Results.HalfPowerFrequency1;
    hPowF2 = p.Results.HalfPowerFrequency2;
    
    if isempty(hPowF1), hPowF1 = 58; end;
    if isempty(hPowF2), hPowF2 = 62; end;
    
    fOut = designfilt(...
      'bandstopiir',...
      'SampleRate',sampleRate,...
      'HalfPowerFrequency1', hPowF1, ...
      'HalfPowerFrequency2', hPowF2,...
      'FilterOrder', p.Results.FilterOrder,...
      'DesignMethod',p.Results.DesignMethod);
         
  case 'bandpass'
    %% Arbitrary BandPass Filter (Defaults to 0.5Hz-150Hz)
    hPowF1 = p.Results.HalfPowerFrequency1;
    hPowF2 = p.Results.HalfPowerFrequency2;
    
    if isempty(hPowF1), hPowF1 = 0.5; end;
    if isempty(hPowF2), hPowF2 = 150; end;
    
    fOut = designfilt(...
      'bandpassiir',...
      'SampleRate', sampleRate,...
      'HalfPowerFrequency1',hPowF1,...
      'HalfPowerFrequency2',hPowF2,...
      'FilterOrder',p.Results.FilterOrder,...
      'DesignMethod',p.Results.DesignMethod);   
    
  case 'lowpass'
    %% Arbitrary Lowpass Filter (Defaults to 150Hz)
    hPowF = p.Results.HalfPowerFrequency;
    if isempty(hPowF), hPowF = 150; end;
   
    fOut = designfilt(...
      'lowpassiir',...
      'SampleRate',sampleRate,...
      'HalfPowerFrequency', hPowF,...
      'FilterOrder', p.Results.FilterOrder,...
      'DesignMethod', p.Results.DesignMethod);     
    
  case 'highpass'
    %% Arbitrary Highpass Filter (Defaults to 0.5Hz)
    hPowF = p.Results.HalfPowerFrequency;
    if isempty(hPowF), hPowF = 0.5; end;
    fOut = designfilt(...
      'highpassiir',...
      'SampleRate',sampleRate,...
      'HalfPowerFrequency', hPowF,...
      'FilterOrder', p.Results.FilterOrder,...
      'DesignMethod', p.Results.DesignMethod);   
    
  %% Use of the filters below this line is NOT ADVISED and no longer supported
    
  case '60hznotch_highorder'
    warning('WARNING: THIS FILTER WILL LIKELY DISTORT YOUR SIGNAL');
    fOut = designfilt(...
      'bandstopiir',...
      'SampleRate',sampleRate,...
      'PassbandFrequency1',57,...
      'StopbandFrequency1',59,...
      'StopbandFrequency2',61,...
      'PassbandFrequency2',63,...
      'StopbandAttenuation',60,...
      'PassbandRipple1',1,...
      'PassbandRipple2',1,...
      'DesignMethod','butter');       
    
  case 'bandpass_highorder'    
    warning('WARNING: THIS FILTER WILL LIKELY DISTORT YOUR SIGNAL');
    fOut = designfilt(...
      'bandpassiir',...
      'SampleRate',sampleRate,...
      'StopbandAttenuation1',60,...
      'StopbandFrequency1',0.01,...
      'PassbandFrequency1',0.5,...
      'PassbandRipple',1,...
      'PassbandFrequency2',150,...
      'StopbandFrequency2',160,...
      'StopbandAttenuation2',60,...
      'DesignMethod','butter');  
    
  
    
  case 'lowpass_highorder'
    warning('WARNING: THIS FILTER WILL LIKELY DISTORT YOUR SIGNAL');
    fOut = designfilt(...
      'lowpassiir',...
      'SampleRate',sampleRate,...
      'PassbandFrequency',150,...
      'StopbandFrequency',155,...
      'StopbandAttenuation',60,...
      'PassbandRipple',1,...
      'DesignMethod','butter');    
       
  case 'highpass_highorder'
    warning('WARNING: THIS FILTER WILL LIKELY DISTORT YOUR SIGNAL');
    fOut = designfilt(...
      'highpassiir',...
      'SampleRate',sampleRate,...
      'PassbandFrequency',0.5,...
      'StopbandFrequency',0.1,...
      'StopbandAttenuation',60,...
      'PassbandRipple',1,...
      'DesignMethod','butter');    
    
  otherwise
    error('Provided filter name does not match known types');
    
end

